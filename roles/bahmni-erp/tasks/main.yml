- name: Install python-gdata
  yum: name=python-gdata-2.0.11-1.el6.noarch state=present

- name: install nonblockingloghandler
  pip: name=nonblockingloghandler state=present

- name: Check if postgres yum repo rpm is present
  stat: path={{postgres_repo_rpm_location}}
  register: postgresRepoRpm

- name: Download postgres yum repo rpm if not present
  command: "wget -q -O {{ postgres_repo_rpm_location }} {{postgres_repo_download_url}} creates={{ postgres_repo_rpm_location }}"
  when: postgresRepoRpm.stat.exists == false

- name: Install postgresql yum repository
  yum: name={{postgres_repo_rpm_location}} state=present

- name: insert/update postgres config after erp_postgres line
  blockinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK erp_postgres -->"
    insertafter: "#erp_postgres"
    state: present
    block: |
      {% for host in groups['bahmni-lab'] %}
      {% if host not in [False, 'localhost', '127.0.0.1'] %}
      #erp_postgres
      host clinlims clinlims  {{ hostvars.get(host, {}).get('ansible_ssh_host') or host }}/32 trust
      {% endif %}
      {% endfor %}


- name: insert/update postgres config after erp_openerp line
  blockinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK erp_openerp -->"
    insertafter: "#erp_openerp"
    state: present
    block: |
      {% for host in groups['bahmni-erp'] %}
      {% if host not in [False, 'localhost', '127.0.0.1'] %}
      #erp_openerp
      host all openerp  {{ hostvars.get(host, {}).get('ansible_ssh_host') or host }}/32 trust
      {% endif %}
      {% endfor %}


- name: insert/update postgres config after erp_db_openerp line
  blockinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK erp_db_openerp -->"
    insertafter: "#erp_db_openerp"
    state: present
    block: |
      {% for host in groups['bahmni-erp-db'] %}
      {% if host not in [False, 'localhost', '127.0.0.1'] %}
      #erp_db_openerp
      host all openerp {{ hostvars.get(host, {}).get('ansible_ssh_host') or host }}/32 trust
      {% endif %}
      {% endfor %}


- name: insert/update postgres config after erp_db_slave_openerp line
  blockinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK erp_db_slave_openerp -->"
    insertafter: "#erp_db_slave_openerp"
    state: present
    block: |
      {% for host in groups['bahmni-erp-db-slave'] %}
      {% if host not in [False, 'localhost', '127.0.0.1'] %}
      #erp_db_slave_openerp
      host all openerp {{ hostvars.get(host, {}).get('ansible_ssh_host') or host }}/32 trust
      {% endif %}
      {% endfor %}

- name: insert/update postgres config after erp_db_slave_openerp_ipv6 line
  blockinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK erp_db_slave_openerp_ipv6 -->"
    insertafter: "#erp_db_slave_openerp_ipv6"
    state: present
    block: |
      {% for host in groups['bahmni-erp-db-slave'] %}
      {% if host not in [False, 'localhost', '127.0.0.1'] %}
      #erp_db_slave_openerp_ipv6
      host replication openerp {{ hostvars.get(host, {}).get('ansible_ssh_host') or host }}/32 trust
      {% endif %}
      {% endfor %}

- name: Start PostgreSQL and enable at boot
  service:
    name=postgresql-{{ postgres_version }}
    state=restarted

- name: Install python-psycopg2
  yum: name=python-psycopg2 state=present

- name: Check if bahmni-erp rpm needs an update
  command: yum list installed bahmni-erp
  register: installed_bahmni_erp
  ignore_errors: true

- name: Uninstall bahmni-erp rpm
  yum: name="bahmni-erp" state=absent
  when: installed_bahmni_erp.stdout.find("{{ bahmni_erp_version }}") == -1

- name: Check if openerp database dump is provided in /etc/bahmni-installer/deployment-artifacts
  local_action: stat path=/etc/bahmni-installer/deployment-artifacts/openerp_backup.sql
  register: openerp_backup_file

- name: Copy file to remote location if it is available
  copy: src=/etc/bahmni-installer/deployment-artifacts/openerp_backup.sql
        dest=/etc/bahmni-installer/deployment-artifacts/openerp_backup.sql
        mode=644
        owner={{ bahmni_user }}
        group={{ bahmni_group }}
  when: openerp_backup_file.stat.exists == True

- name: Install openerp database dump if provided and database does not exist
  script: restore_openerp_dump.sh
  sudo: yes
  when: openerp_backup_file.stat.exists == True

- name: Install bahmni-erp from bahmni-repo
  yum: name="bahmni-erp-{{ bahmni_erp_version }}" state=present

- name: Stop Openerp
  service:
    name=openerp
    state=stopped
  when: passive is not defined or passive != 'yes'
  tags: stop_bahmni

- name: Copy openerp server template
  template: src=openerp-server.conf.j2 dest=/etc/openerp/openerp-server.conf owner=openerp group=openerp mode=0655

- name: Get matched IpTable rule
  shell: iptables -nL --line-numbers | grep BAHMNIERP  -m 1 | cut -c 1-2
  register: matchedRule

- name: delete matching rule if exists
  shell: iptables -D INPUT {{ matchedRule.stdout }}
  when: matchedRule.stdout!=""

- name: Allow openerp port through firewall
  command: /sbin/iptables -I INPUT 1 -p tcp --dport  {{ openerp_port }} -j ACCEPT -m comment --comment "BAHMNIERP"

- name: save iptables
  command: service iptables save

- name: Switch off chkconfig for Openerp on passive
  service: name=openerp state=stopped enabled=no
  when: passive is defined and passive == 'yes'

- name: copy erp_ssl conf file
  template:
      src=erp_ssl.conf.j2
      dest=/opt/bahmni-web/etc/erp_ssl.conf
      mode=644
      owner={{ bahmni_user }}
      group={{ bahmni_group }}
  delegate_to: "{{ groups['bahmni-emr'][0] }}"

- name: Start Openerp and enable at boot
  service:
    name=openerp
    enabled=yes
    state=started
  when: passive is not defined or passive != 'yes'
  tags: start_bahmni
